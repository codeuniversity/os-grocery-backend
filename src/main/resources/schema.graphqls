enum Unit {
  PACKETS, ML, LTR, KG
}

type Item {
  id: ID
  name: String
}

type ListItem {
  id: ID
  item: Item
  unit: Unit
  amount: Float
  fetched: Boolean
}

type SortedListItem {
  listItem: ListItem
  row: Row
}

type Row {
  id: ID
  name: String
  supermarket: Supermarket
}

type Supermarket {
  id: ID
  name: String
  rows: [Row]
}

type ShoppingList {
  listItems: [ListItem]
}

type SortedShoppingList {
  unfetchedItems: [SortedListItem]
  fetchedItems: [SortedListItem]
}

type Query {
  getItems: [Item]
  getShoppingList: ShoppingList
  getSortedShoppingList: SortedShoppingList

  getAllSupermarkets: [Supermarket]
}

type Mutation {
  addListItemToList(itemId: ID!, amount: Float!, unit: Unit!): ListItem
  removeListItemFromList(listItemId: ID!): ListItem
  completeListItem(listItemId: ID!): ListItem
  uncompleteListItem(listItemId: ID!): ListItem
}

schema {
  query: Query
  mutation: Mutation
}
